/**\n * Asset Integrity Integration\n * Integrates asset verification, repair, and manifest generation systems\n */\nimport AssetVerificationSystem from './AssetVerificationSystem.js';\nimport AssetRepairSystem from './AssetRepairSystem.js';\nimport AssetManifestGenerator from './AssetManifestGenerator.js';\n\nclass AssetIntegrityIntegration {\n    constructor(config = {}) {\n        this.config = {\n            enableVerification: true,\n            enableRepair: true,\n            enableManifestGeneration: false, // Usually done at build time\n            performStartupCheck: true,\n            autoRepairCritical: true,\n            reportingEnabled: true,\n            debugMode: process.env.NODE_ENV === 'development',\n            ...config\n        };\n        \n        // Components\n        this.verificationSystem = null;\n        this.repairSystem = null;\n        this.manifestGenerator = null;\n        \n        // State\n        this.initialized = false;\n        this.startupCheckCompleted = false;\n        \n        // Metrics\n        this.integrationMetrics = {\n            initializationTime: 0,\n            startupCheckTime: 0,\n            totalVerifications: 0,\n            totalRepairs: 0,\n            lastHealthCheck: null,\n            systemHealth: 'unknown'\n        };\n        \n        // Event listeners\n        this.eventListeners = new Map();\n        \n        this.initialize();\n    }\n    \n    /**\n     * Initialize asset integrity integration\n     */\n    async initialize() {\n        const startTime = performance.now();\n        console.log('Initializing Asset Integrity Integration...');\n        \n        try {\n            // Initialize verification system\n            if (this.config.enableVerification) {\n                this.verificationSystem = new AssetVerificationSystem({\n                    debugMode: this.config.debugMode,\n                    enableAutoRepair: false // We'll handle repair through repair system\n                });\n                \n                await this.verificationSystem.initialize();\n                this.setupVerificationEventHandlers();\n                console.log('Asset verification system initialized');\n            }\n            \n            // Initialize repair system\n            if (this.config.enableRepair && this.verificationSystem) {\n                this.repairSystem = new AssetRepairSystem(this.verificationSystem, {\n                    debugMode: this.config.debugMode\n                });\n                \n                this.setupRepairEventHandlers();\n                console.log('Asset repair system initialized');\n            }\n            \n            // Initialize manifest generator (if enabled)\n            if (this.config.enableManifestGeneration) {\n                this.manifestGenerator = new AssetManifestGenerator({\n                    debugMode: this.config.debugMode\n                });\n                console.log('Asset manifest generator initialized');\n            }\n            \n            // Setup integration event handlers\n            this.setupIntegrationEventHandlers();\n            \n            // Perform startup check\n            if (this.config.performStartupCheck && this.verificationSystem) {\n                await this.performStartupIntegrityCheck();\n            }\n            \n            // Setup periodic health monitoring\n            this.setupHealthMonitoring();\n            \n            const endTime = performance.now();\n            this.integrationMetrics.initializationTime = endTime - startTime;\n            this.initialized = true;\n            \n            console.log(`Asset Integrity Integration initialized in ${Math.round(this.integrationMetrics.initializationTime)}ms`);\n            this.emit('initialized', {\n                initializationTime: this.integrationMetrics.initializationTime,\n                components: {\n                    verification: !!this.verificationSystem,\n                    repair: !!this.repairSystem,\n                    manifestGeneration: !!this.manifestGenerator\n                }\n            });\n            \n        } catch (error) {\n            console.error('Failed to initialize Asset Integrity Integration:', error);\n            this.emit('initializationError', { error });\n            throw error;\n        }\n    }\n    \n    /**\n     * Setup verification system event handlers\n     */\n    setupVerificationEventHandlers() {\n        if (!this.verificationSystem) return;\n        \n        this.verificationSystem.on('verificationCompleted', (results) => {\n            this.integrationMetrics.totalVerifications++;\n            \n            // Auto-repair critical assets if enabled\n            if (this.config.autoRepairCritical && this.repairSystem) {\n                const criticalAssets = this.getCriticalAssetsNeedingRepair();\n                if (criticalAssets.length > 0) {\n                    console.log(`Auto-repairing ${criticalAssets.length} critical assets`);\n                    this.repairSystem.scheduleRepair();\n                }\n            }\n            \n            // Forward event\n            this.emit('verificationCompleted', results);\n        });\n        \n        this.verificationSystem.on('verificationError', (error) => {\n            console.error('Verification error:', error);\n            this.emit('verificationError', error);\n        });\n        \n        this.verificationSystem.on('startupCheckCompleted', (results) => {\n            this.startupCheckCompleted = true;\n            this.integrationMetrics.startupCheckTime = results.duration;\n            this.emit('startupCheckCompleted', results);\n        });\n    }\n    \n    /**\n     * Setup repair system event handlers\n     */\n    setupRepairEventHandlers() {\n        if (!this.repairSystem) return;\n        \n        this.repairSystem.on('repairCompleted', (results) => {\n            this.integrationMetrics.totalRepairs += results.completed;\n            \n            // Re-verify repaired assets\n            if (results.completed > 0 && this.verificationSystem) {\n                setTimeout(() => {\n                    this.verificationSystem.verifyAllAssets(false);\n                }, 1000);\n            }\n            \n            // Forward event\n            this.emit('repairCompleted', results);\n        });\n        \n        this.repairSystem.on('repairError', (error) => {\n            console.error('Repair error:', error);\n            this.emit('repairError', error);\n        });\n        \n        this.repairSystem.on('criticalAssetRepairFailed', (data) => {\n            console.error('Critical asset repair failed:', data);\n            this.emit('criticalAssetRepairFailed', data);\n        });\n    }\n    \n    /**\n     * Setup integration event handlers\n     */\n    setupIntegrationEventHandlers() {\n        // Listen for online/offline events\n        window.addEventListener('online', () => {\n            console.log('Connection restored - resuming asset operations');\n            this.handleConnectionRestored();\n        });\n        \n        window.addEventListener('offline', () => {\n            console.log('Connection lost - pausing asset operations');\n            this.handleConnectionLost();\n        });\n        \n        // Listen for page visibility changes\n        document.addEventListener('visibilitychange', () => {\n            if (!document.hidden) {\n                // Page became visible - check for updates\n                this.handlePageVisible();\n            }\n        });\n    }\n    \n    /**\n     * Perform startup integrity check\n     */\n    async performStartupIntegrityCheck() {\n        if (!this.verificationSystem) {\n            throw new Error('Verification system not available');\n        }\n        \n        console.log('Performing startup integrity check...');\n        \n        try {\n            const results = await this.verificationSystem.performStartupCheck();\n            \n            // Show user notification if critical issues found\n            if (results.corrupted > 0 || results.missing > 0) {\n                this.showIntegrityIssueNotification(results);\n            }\n            \n            return results;\n            \n        } catch (error) {\n            console.error('Startup integrity check failed:', error);\n            this.showIntegrityErrorNotification(error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Get critical assets needing repair\n     */\n    getCriticalAssetsNeedingRepair() {\n        if (!this.verificationSystem || !this.verificationSystem.manifest) {\n            return [];\n        }\n        \n        const criticalAssets = [];\n        const corruptedAssets = Array.from(this.verificationSystem.corruptedAssets);\n        const missingAssets = Array.from(this.verificationSystem.missingAssets);\n        const assetsNeedingRepair = [...corruptedAssets, ...missingAssets];\n        \n        for (const assetPath of assetsNeedingRepair) {\n            const assetInfo = this.verificationSystem.manifest.assets[assetPath];\n            if (assetInfo && assetInfo.critical) {\n                criticalAssets.push(assetPath);\n            }\n        }\n        \n        return criticalAssets;\n    }\n    \n    /**\n     * Show integrity issue notification\n     */\n    showIntegrityIssueNotification(results) {\n        const notification = document.createElement('div');\n        notification.className = 'asset-integrity-notification';\n        notification.innerHTML = `\n            <div style=\"\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: #ff9800;\n                color: white;\n                padding: 20px;\n                border-radius: 8px;\n                box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n                z-index: 10000;\n                max-width: 400px;\n                font-family: Arial, sans-serif;\n            \">\n                <div style=\"font-weight: bold; margin-bottom: 10px;\">\n                    ⚠️ Asset Integrity Issues Detected\n                </div>\n                <div style=\"margin-bottom: 15px; font-size: 14px;\">\n                    ${results.corrupted > 0 ? `${results.corrupted} corrupted assets` : ''}\n                    ${results.corrupted > 0 && results.missing > 0 ? ' and ' : ''}\n                    ${results.missing > 0 ? `${results.missing} missing assets` : ''}\n                    detected. The game may not function properly.\n                </div>\n                <div style=\"display: flex; gap: 10px;\">\n                    <button id=\"repair-assets\" style=\"\n                        background: white;\n                        color: #ff9800;\n                        border: none;\n                        padding: 8px 16px;\n                        border-radius: 4px;\n                        cursor: pointer;\n                        font-weight: bold;\n                    \">Repair Now</button>\n                    <button id=\"dismiss-notification\" style=\"\n                        background: transparent;\n                        color: white;\n                        border: 1px solid white;\n                        padding: 8px 16px;\n                        border-radius: 4px;\n                        cursor: pointer;\n                    \">Dismiss</button>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Setup button handlers\n        document.getElementById('repair-assets').addEventListener('click', () => {\n            if (this.repairSystem) {\n                this.repairSystem.scheduleRepair();\n            }\n            notification.remove();\n        });\n        \n        document.getElementById('dismiss-notification').addEventListener('click', () => {\n            notification.remove();\n        });\n        \n        // Auto-dismiss after 30 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 30000);\n    }\n    \n    /**\n     * Show integrity error notification\n     */\n    showIntegrityErrorNotification(error) {\n        const notification = document.createElement('div');\n        notification.innerHTML = `\n            <div style=\"\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: #f44336;\n                color: white;\n                padding: 20px;\n                border-radius: 8px;\n                box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n                z-index: 10000;\n                max-width: 400px;\n                font-family: Arial, sans-serif;\n            \">\n                <div style=\"font-weight: bold; margin-bottom: 10px;\">\n                    🚨 Asset Integrity Check Failed\n                </div>\n                <div style=\"margin-bottom: 15px; font-size: 14px;\">\n                    Unable to verify game assets. The game may not function properly.\n                </div>\n                <button onclick=\"this.parentElement.parentElement.remove()\" style=\"\n                    background: white;\n                    color: #f44336;\n                    border: none;\n                    padding: 8px 16px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-weight: bold;\n                \">Dismiss</button>\n            </div>\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Auto-dismiss after 30 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 30000);\n    }\n    \n    /**\n     * Setup health monitoring\n     */\n    setupHealthMonitoring() {\n        // Perform health check every 5 minutes\n        setInterval(() => {\n            this.performHealthCheck();\n        }, 300000);\n        \n        // Initial health check\n        setTimeout(() => {\n            this.performHealthCheck();\n        }, 5000);\n    }\n    \n    /**\n     * Perform health check\n     */\n    async performHealthCheck() {\n        try {\n            let overallHealth = 'healthy';\n            const healthData = {\n                timestamp: Date.now(),\n                verification: null,\n                repair: null,\n                overall: overallHealth\n            };\n            \n            // Check verification system health\n            if (this.verificationSystem) {\n                const verificationHealth = this.verificationSystem.getHealthStatus();\n                healthData.verification = verificationHealth;\n                \n                if (verificationHealth.status !== 'healthy') {\n                    overallHealth = 'degraded';\n                }\n            }\n            \n            // Check repair system health\n            if (this.repairSystem) {\n                const repairStatus = this.repairSystem.getRepairStatus();\n                healthData.repair = repairStatus;\n                \n                if (repairStatus.progress.status === 'error') {\n                    overallHealth = 'unhealthy';\n                }\n            }\n            \n            healthData.overall = overallHealth;\n            this.integrationMetrics.systemHealth = overallHealth;\n            this.integrationMetrics.lastHealthCheck = Date.now();\n            \n            // Emit health check event\n            this.emit('healthCheck', healthData);\n            \n            // Log health issues\n            if (overallHealth !== 'healthy') {\n                console.warn('Asset integrity system health issues detected:', healthData);\n            }\n            \n        } catch (error) {\n            console.error('Health check failed:', error);\n            this.integrationMetrics.systemHealth = 'error';\n        }\n    }\n    \n    /**\n     * Handle connection restored\n     */\n    async handleConnectionRestored() {\n        // Resume verification\n        if (this.verificationSystem) {\n            setTimeout(() => {\n                this.verificationSystem.verifyAllAssets(false);\n            }, 2000);\n        }\n        \n        // Check for manifest updates\n        if (this.verificationSystem) {\n            try {\n                await this.verificationSystem.updateManifest();\n            } catch (error) {\n                console.warn('Failed to check for manifest updates:', error);\n            }\n        }\n    }\n    \n    /**\n     * Handle connection lost\n     */\n    handleConnectionLost() {\n        // Cancel active repairs\n        if (this.repairSystem) {\n            this.repairSystem.cancelActiveDownloads();\n        }\n    }\n    \n    /**\n     * Handle page visible\n     */\n    handlePageVisible() {\n        // Check if we need to perform verification\n        const timeSinceLastCheck = Date.now() - (this.integrationMetrics.lastHealthCheck || 0);\n        \n        if (timeSinceLastCheck > 600000) { // 10 minutes\n            this.performHealthCheck();\n        }\n    }\n    \n    /**\n     * Verify all assets\n     */\n    async verifyAllAssets(showProgress = true) {\n        if (!this.verificationSystem) {\n            throw new Error('Verification system not available');\n        }\n        \n        return await this.verificationSystem.verifyAllAssets(showProgress);\n    }\n    \n    /**\n     * Repair assets\n     */\n    async repairAssets() {\n        if (!this.repairSystem) {\n            throw new Error('Repair system not available');\n        }\n        \n        return await this.repairSystem.scheduleRepair();\n    }\n    \n    /**\n     * Generate asset manifest\n     */\n    async generateManifest(assetList) {\n        if (!this.manifestGenerator) {\n            this.manifestGenerator = new AssetManifestGenerator();\n        }\n        \n        return await this.manifestGenerator.generateFromAssetList(assetList);\n    }\n    \n    /**\n     * Get comprehensive status\n     */\n    getStatus() {\n        const status = {\n            initialized: this.initialized,\n            startupCheckCompleted: this.startupCheckCompleted,\n            metrics: { ...this.integrationMetrics },\n            components: {\n                verification: this.verificationSystem ? this.verificationSystem.getHealthStatus() : null,\n                repair: this.repairSystem ? this.repairSystem.getRepairStatus() : null\n            }\n        };\n        \n        return status;\n    }\n    \n    /**\n     * Get detailed integrity report\n     */\n    generateIntegrityReport() {\n        if (!this.verificationSystem) {\n            throw new Error('Verification system not available');\n        }\n        \n        const verificationReport = this.verificationSystem.generateIntegrityReport();\n        const repairHistory = this.repairSystem ? this.repairSystem.getRepairHistory(50) : [];\n        \n        return {\n            ...verificationReport,\n            integration: {\n                metrics: this.integrationMetrics,\n                repairHistory,\n                components: {\n                    verification: !!this.verificationSystem,\n                    repair: !!this.repairSystem,\n                    manifestGeneration: !!this.manifestGenerator\n                }\n            }\n        };\n    }\n    \n    /**\n     * Export integrity report\n     */\n    exportIntegrityReport(format = 'json') {\n        const report = this.generateIntegrityReport();\n        \n        switch (format) {\n            case 'json':\n                return JSON.stringify(report, null, 2);\n            case 'html':\n                return this.convertReportToHTML(report);\n            default:\n                return report;\n        }\n    }\n    \n    /**\n     * Convert report to HTML\n     */\n    convertReportToHTML(report) {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Asset Integrity Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .summary { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }\n        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }\n        .metric-card { background: white; padding: 15px; border-radius: 5px; border: 1px solid #ddd; }\n        .status-healthy { color: #4CAF50; }\n        .status-degraded { color: #FF9800; }\n        .status-unhealthy { color: #F44336; }\n        table { border-collapse: collapse; width: 100%; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <h1>Asset Integrity Report</h1>\n    \n    <div class=\"summary\">\n        <h2>Summary</h2>\n        <p><strong>Status:</strong> <span class=\"status-${report.summary.status}\">${report.summary.status.toUpperCase()}</span></p>\n        <p><strong>Generated:</strong> ${report.timestamp}</p>\n        <p><strong>System Health:</strong> <span class=\"status-${report.integration.metrics.systemHealth}\">${report.integration.metrics.systemHealth.toUpperCase()}</span></p>\n    </div>\n    \n    <div class=\"metrics\">\n        <div class=\"metric-card\">\n            <h3>Verification Metrics</h3>\n            <p><strong>Total Verifications:</strong> ${report.integration.metrics.totalVerifications}</p>\n            <p><strong>Total Repairs:</strong> ${report.integration.metrics.totalRepairs}</p>\n            <p><strong>Initialization Time:</strong> ${Math.round(report.integration.metrics.initializationTime)}ms</p>\n        </div>\n        \n        <div class=\"metric-card\">\n            <h3>Asset Status</h3>\n            <p><strong>Total Assets:</strong> ${report.summary.totalAssets}</p>\n            <p><strong>Verified:</strong> ${report.summary.verifiedAssets}</p>\n            <p><strong>Corrupted:</strong> ${report.summary.corruptedAssets}</p>\n            <p><strong>Missing:</strong> ${report.summary.missingAssets}</p>\n        </div>\n    </div>\n    \n    ${report.integration.repairHistory.length > 0 ? `\n    <h2>Recent Repairs</h2>\n    <table>\n        <tr>\n            <th>Asset</th>\n            <th>Timestamp</th>\n            <th>Success</th>\n            <th>Attempts</th>\n            <th>Size</th>\n        </tr>\n        ${report.integration.repairHistory.slice(0, 10).map(repair => `\n        <tr>\n            <td>${repair.path}</td>\n            <td>${new Date(repair.timestamp).toLocaleString()}</td>\n            <td>${repair.success ? '✅' : '❌'}</td>\n            <td>${repair.attempts}</td>\n            <td>${repair.size ? Math.round(repair.size / 1024) + ' KB' : 'N/A'}</td>\n        </tr>\n        `).join('')}\n    </table>\n    ` : ''}\n    \n</body>\n</html>\n        `;\n    }\n    \n    /**\n     * Event system\n     */\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(callback);\n    }\n    \n    off(event, callback) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            const index = listeners.indexOf(callback);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    \n    emit(event, data) {\n        if (this.eventListeners.has(event)) {\n            this.eventListeners.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event listener for ${event}:`, error);\n                }\n            });\n        }\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Update component configurations\n        if (this.verificationSystem && newConfig.verification) {\n            this.verificationSystem.updateConfig(newConfig.verification);\n        }\n        \n        if (this.repairSystem && newConfig.repair) {\n            this.repairSystem.updateConfig(newConfig.repair);\n        }\n        \n        console.log('Asset integrity integration configuration updated:', this.config);\n    }\n    \n    /**\n     * Cleanup and destroy\n     */\n    destroy() {\n        // Destroy components\n        if (this.verificationSystem) {\n            this.verificationSystem.destroy();\n        }\n        \n        if (this.repairSystem) {\n            this.repairSystem.destroy();\n        }\n        \n        // Clear event listeners\n        this.eventListeners.clear();\n        \n        // Reset state\n        this.initialized = false;\n        this.startupCheckCompleted = false;\n        \n        console.log('Asset Integrity Integration destroyed');\n    }\n}\n\nexport default AssetIntegrityIntegration;"