/**\n * Error Handling Integration\n * Integrates all error handling components into a unified system\n */\nimport ComprehensiveErrorHandler from './ComprehensiveErrorHandler.js';\nimport AutoSaveManager from './AutoSaveManager.js';\nimport ErrorReportingSystem from './ErrorReportingSystem.js';\nimport FallbackSystemsManager from './FallbackSystemsManager.js';\n\nclass ErrorHandlingIntegration {\n    constructor(gameEngine, config = {}) {\n        this.gameEngine = gameEngine;\n        \n        // Configuration\n        this.config = {\n            enableErrorHandler: true,\n            enableAutoSave: true,\n            enableReporting: true,\n            enableFallbacks: true,\n            debugMode: process.env.NODE_ENV === 'development',\n            ...config\n        };\n        \n        // Components\n        this.errorHandler = null;\n        this.autoSaveManager = null;\n        this.reportingSystem = null;\n        this.fallbackManager = null;\n        \n        // State\n        this.initialized = false;\n        this.systemHealth = {\n            overall: 'healthy',\n            components: {},\n            lastCheck: null\n        };\n        \n        // Metrics\n        this.metrics = {\n            totalErrors: 0,\n            criticalErrors: 0,\n            recoveredErrors: 0,\n            fallbackActivations: 0,\n            autoSaves: 0,\n            reportsGenerated: 0\n        };\n        \n        this.initialize();\n    }\n    \n    /**\n     * Initialize error handling integration\n     */\n    async initialize() {\n        console.log('Initializing Error Handling Integration...');\n        \n        try {\n            // Initialize error reporting first\n            if (this.config.enableReporting) {\n                this.reportingSystem = new ErrorReportingSystem({\n                    debugMode: this.config.debugMode,\n                    userConsent: this.config.userConsent\n                });\n                console.log('Error reporting system initialized');\n            }\n            \n            // Initialize comprehensive error handler\n            if (this.config.enableErrorHandler) {\n                this.errorHandler = new ComprehensiveErrorHandler(this.gameEngine);\n                this.setupErrorHandlerIntegration();\n                console.log('Comprehensive error handler initialized');\n            }\n            \n            // Initialize auto-save manager\n            if (this.config.enableAutoSave) {\n                this.autoSaveManager = new AutoSaveManager(this.gameEngine, this.errorHandler);\n                this.setupAutoSaveIntegration();\n                console.log('Auto-save manager initialized');\n            }\n            \n            // Initialize fallback systems\n            if (this.config.enableFallbacks) {\n                this.fallbackManager = new FallbackSystemsManager(this.gameEngine);\n                this.setupFallbackIntegration();\n                console.log('Fallback systems manager initialized');\n            }\n            \n            // Setup cross-component integration\n            this.setupCrossComponentIntegration();\n            \n            // Start health monitoring\n            this.startHealthMonitoring();\n            \n            // Setup event listeners\n            this.setupEventListeners();\n            \n            this.initialized = true;\n            \n            // Log successful initialization\n            this.log('info', 'Error Handling Integration initialized successfully', {\n                components: {\n                    errorHandler: !!this.errorHandler,\n                    autoSave: !!this.autoSaveManager,\n                    reporting: !!this.reportingSystem,\n                    fallbacks: !!this.fallbackManager\n                }\n            });\n            \n            // Notify game engine\n            if (this.gameEngine.onErrorHandlingReady) {\n                this.gameEngine.onErrorHandlingReady(this);\n            }\n            \n        } catch (error) {\n            console.error('Failed to initialize error handling integration:', error);\n            \n            // Try to initialize basic error reporting at least\n            if (!this.reportingSystem) {\n                try {\n                    this.reportingSystem = new ErrorReportingSystem({ debugMode: true });\n                } catch (reportingError) {\n                    console.error('Failed to initialize basic error reporting:', reportingError);\n                }\n            }\n            \n            throw error;\n        }\n    }\n    \n    /**\n     * Setup error handler integration\n     */\n    setupErrorHandlerIntegration() {\n        if (!this.errorHandler) return;\n        \n        // Override error handler's reporting to use our reporting system\n        const originalHandleError = this.errorHandler.handleError.bind(this.errorHandler);\n        this.errorHandler.handleError = async (errorInfo) => {\n            // Call original handler\n            await originalHandleError(errorInfo);\n            \n            // Update metrics\n            this.metrics.totalErrors++;\n            if (errorInfo.severity === 'critical') {\n                this.metrics.criticalErrors++;\n            }\n            \n            // Report through our system\n            if (this.reportingSystem) {\n                this.reportingSystem.reportError({\n                    ...errorInfo,\n                    source: 'error_handler',\n                    gameState: this.getGameStateSnapshot()\n                });\n            }\n            \n            // Trigger auto-save on critical errors\n            if (errorInfo.severity === 'critical' && this.autoSaveManager) {\n                await this.autoSaveManager.performEmergencySave();\n            }\n            \n            // Activate fallbacks if needed\n            if (errorInfo.category && this.fallbackManager) {\n                await this.fallbackManager.activateFallback(errorInfo.category, `error_${errorInfo.type}`);\n            }\n        };\n    }\n    \n    /**\n     * Setup auto-save integration\n     */\n    setupAutoSaveIntegration() {\n        if (!this.autoSaveManager) return;\n        \n        // Track auto-save metrics\n        const originalSaveGameState = this.autoSaveManager.saveGameState.bind(this.autoSaveManager);\n        this.autoSaveManager.saveGameState = async (type) => {\n            const result = await originalSaveGameState(type);\n            this.metrics.autoSaves++;\n            \n            // Log save events\n            if (this.reportingSystem) {\n                this.reportingSystem.log('info', `Auto-save completed: ${type}`, {\n                    saveKey: result,\n                    timestamp: Date.now()\n                });\n            }\n            \n            return result;\n        };\n    }\n    \n    /**\n     * Setup fallback integration\n     */\n    setupFallbackIntegration() {\n        if (!this.fallbackManager) return;\n        \n        // Track fallback activations\n        const originalActivateFallback = this.fallbackManager.activateFallback.bind(this.fallbackManager);\n        this.fallbackManager.activateFallback = async (systemType, reason) => {\n            const result = await originalActivateFallback(systemType, reason);\n            \n            if (result) {\n                this.metrics.fallbackActivations++;\n                \n                // Report fallback activation\n                if (this.reportingSystem) {\n                    this.reportingSystem.reportError({\n                        type: 'fallback_activation',\n                        category: systemType,\n                        message: `Fallback activated for ${systemType}`,\n                        severity: 'medium',\n                        source: 'fallback_manager',\n                        data: { reason }\n                    });\n                }\n                \n                // Log fallback activation\n                this.log('warn', `Fallback activated for ${systemType}`, { reason });\n            }\n            \n            return result;\n        };\n    }\n    \n    /**\n     * Setup cross-component integration\n     */\n    setupCrossComponentIntegration() {\n        // Error handler -> Fallback manager\n        if (this.errorHandler && this.fallbackManager) {\n            this.errorHandler.addEventListener?.('criticalError', (errorInfo) => {\n                this.fallbackManager.activateFallback(errorInfo.category, 'critical_error');\n            });\n        }\n        \n        // Fallback manager -> Auto-save\n        if (this.fallbackManager && this.autoSaveManager) {\n            this.fallbackManager.addEventListener?.('fallbackActivated', () => {\n                this.autoSaveManager.performEmergencySave();\n            });\n        }\n        \n        // Auto-save -> Reporting\n        if (this.autoSaveManager && this.reportingSystem) {\n            this.autoSaveManager.addEventListener?.('saveCompleted', (saveInfo) => {\n                this.reportingSystem.trackEvent('auto_save_completed', saveInfo);\n            });\n        }\n    }\n    \n    /**\n     * Start health monitoring\n     */\n    startHealthMonitoring() {\n        setInterval(() => {\n            this.performHealthCheck();\n        }, 60000); // Every minute\n        \n        // Initial health check\n        this.performHealthCheck();\n    }\n    \n    /**\n     * Perform health check\n     */\n    async performHealthCheck() {\n        const health = {\n            overall: 'healthy',\n            components: {},\n            timestamp: Date.now()\n        };\n        \n        let hasIssues = false;\n        \n        // Check error handler\n        if (this.errorHandler) {\n            const errorStats = this.errorHandler.getErrorStatistics();\n            health.components.errorHandler = {\n                status: errorStats.criticalErrors > 5 ? 'unhealthy' : 'healthy',\n                totalErrors: errorStats.totalErrors,\n                criticalErrors: errorStats.criticalErrors,\n                activeFallbacks: errorStats.activeFallbacks.length\n            };\n            \n            if (health.components.errorHandler.status === 'unhealthy') {\n                hasIssues = true;\n            }\n        }\n        \n        // Check auto-save manager\n        if (this.autoSaveManager) {\n            const saveStats = this.autoSaveManager.getSaveStatistics();\n            const timeSinceLastSave = Date.now() - saveStats.lastSaveTime;\n            \n            health.components.autoSave = {\n                status: timeSinceLastSave > 300000 ? 'warning' : 'healthy', // 5 minutes\n                totalSaves: saveStats.totalSaves,\n                lastSaveTime: saveStats.lastSaveTime,\n                timeSinceLastSave\n            };\n            \n            if (health.components.autoSave.status !== 'healthy') {\n                hasIssues = true;\n            }\n        }\n        \n        // Check reporting system\n        if (this.reportingSystem) {\n            const reportingMetrics = this.reportingSystem.getMetrics();\n            const queueStatus = this.reportingSystem.getQueueStatus();\n            \n            health.components.reporting = {\n                status: queueStatus.errors > 50 ? 'warning' : 'healthy',\n                queuedErrors: queueStatus.errors,\n                queuedLogs: queueStatus.logs,\n                totalReports: reportingMetrics.errorsReported\n            };\n            \n            if (health.components.reporting.status !== 'healthy') {\n                hasIssues = true;\n            }\n        }\n        \n        // Check fallback manager\n        if (this.fallbackManager) {\n            const fallbackMetrics = this.fallbackManager.getMetrics();\n            const activeFallbacks = this.fallbackManager.getActiveFallbacks();\n            \n            health.components.fallbacks = {\n                status: Object.keys(activeFallbacks).length > 3 ? 'warning' : 'healthy',\n                activeFallbacks: Object.keys(activeFallbacks).length,\n                totalActivations: fallbackMetrics.activations,\n                failures: fallbackMetrics.failures\n            };\n            \n            if (health.components.fallbacks.status !== 'healthy') {\n                hasIssues = true;\n            }\n        }\n        \n        // Set overall health\n        health.overall = hasIssues ? 'warning' : 'healthy';\n        \n        this.systemHealth = health;\n        \n        // Log health status if there are issues\n        if (hasIssues) {\n            this.log('warn', 'Error handling system health issues detected', health);\n        }\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Global error handling\n        window.addEventListener('error', (event) => {\n            this.handleGlobalError(event);\n        });\n        \n        window.addEventListener('unhandledrejection', (event) => {\n            this.handleUnhandledRejection(event);\n        });\n        \n        // Page lifecycle events\n        window.addEventListener('beforeunload', () => {\n            this.handlePageUnload();\n        });\n        \n        document.addEventListener('visibilitychange', () => {\n            this.handleVisibilityChange();\n        });\n    }\n    \n    /**\n     * Handle global error\n     */\n    handleGlobalError(event) {\n        if (this.errorHandler) {\n            // Let the error handler deal with it\n            return;\n        }\n        \n        // Fallback error handling\n        this.reportError({\n            type: 'global_error',\n            message: event.message,\n            filename: event.filename,\n            lineno: event.lineno,\n            colno: event.colno,\n            error: event.error,\n            severity: 'high',\n            source: 'global_handler'\n        });\n    }\n    \n    /**\n     * Handle unhandled rejection\n     */\n    handleUnhandledRejection(event) {\n        if (this.errorHandler) {\n            // Let the error handler deal with it\n            return;\n        }\n        \n        // Fallback error handling\n        this.reportError({\n            type: 'unhandled_rejection',\n            message: event.reason?.message || 'Unhandled promise rejection',\n            error: event.reason,\n            severity: 'high',\n            source: 'global_handler'\n        });\n    }\n    \n    /**\n     * Handle page unload\n     */\n    handlePageUnload() {\n        // Trigger emergency save\n        if (this.autoSaveManager) {\n            this.autoSaveManager.performEmergencySave();\n        }\n        \n        // Send final reports\n        if (this.reportingSystem) {\n            this.reportingSystem.sendQueuedReports(true);\n        }\n        \n        // Log session end\n        this.log('info', 'Session ending', {\n            metrics: this.getMetrics(),\n            health: this.systemHealth\n        });\n    }\n    \n    /**\n     * Handle visibility change\n     */\n    handleVisibilityChange() {\n        if (document.hidden) {\n            // Page hidden - trigger save\n            if (this.autoSaveManager) {\n                this.autoSaveManager.performEmergencySave();\n            }\n            \n            this.log('info', 'Page hidden - emergency save triggered');\n        } else {\n            // Page visible - resume normal operation\n            this.log('info', 'Page visible - resuming normal operation');\n        }\n    }\n    \n    /**\n     * Report error (public API)\n     */\n    reportError(errorInfo) {\n        if (this.errorHandler) {\n            return this.errorHandler.handleError(errorInfo);\n        } else if (this.reportingSystem) {\n            return this.reportingSystem.reportError(errorInfo);\n        } else {\n            console.error('No error handling system available:', errorInfo);\n            return null;\n        }\n    }\n    \n    /**\n     * Log message (public API)\n     */\n    log(level, message, data) {\n        if (this.reportingSystem) {\n            return this.reportingSystem.log(level, message, data);\n        } else {\n            console[level] || console.log(message, data);\n            return null;\n        }\n    }\n    \n    /**\n     * Track event (public API)\n     */\n    trackEvent(eventName, properties) {\n        if (this.reportingSystem) {\n            return this.reportingSystem.trackEvent(eventName, properties);\n        }\n        return null;\n    }\n    \n    /**\n     * Trigger auto-save (public API)\n     */\n    async triggerAutoSave(type = 'manual') {\n        if (this.autoSaveManager) {\n            return await this.autoSaveManager.saveGameState(type);\n        }\n        return null;\n    }\n    \n    /**\n     * Activate fallback (public API)\n     */\n    async activateFallback(systemType, reason = 'manual') {\n        if (this.fallbackManager) {\n            return await this.fallbackManager.activateFallback(systemType, reason);\n        }\n        return false;\n    }\n    \n    /**\n     * Get game state snapshot\n     */\n    getGameStateSnapshot() {\n        try {\n            if (this.gameEngine.getGameState) {\n                return this.gameEngine.getGameState();\n            } else if (this.gameEngine.state) {\n                return this.gameEngine.state;\n            }\n            return null;\n        } catch (error) {\n            console.error('Failed to get game state snapshot:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Get comprehensive metrics\n     */\n    getMetrics() {\n        const metrics = { ...this.metrics };\n        \n        if (this.errorHandler) {\n            const errorStats = this.errorHandler.getErrorStatistics();\n            metrics.errorHandler = errorStats;\n        }\n        \n        if (this.autoSaveManager) {\n            const saveStats = this.autoSaveManager.getSaveStatistics();\n            metrics.autoSave = saveStats;\n        }\n        \n        if (this.reportingSystem) {\n            const reportingMetrics = this.reportingSystem.getMetrics();\n            metrics.reporting = reportingMetrics;\n        }\n        \n        if (this.fallbackManager) {\n            const fallbackMetrics = this.fallbackManager.getMetrics();\n            metrics.fallbacks = fallbackMetrics;\n        }\n        \n        return metrics;\n    }\n    \n    /**\n     * Get system health\n     */\n    getSystemHealth() {\n        return { ...this.systemHealth };\n    }\n    \n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Update component configurations\n        if (this.errorHandler && newConfig.errorHandler) {\n            this.errorHandler.updateConfig(newConfig.errorHandler);\n        }\n        \n        if (this.autoSaveManager && newConfig.autoSave) {\n            this.autoSaveManager.updateConfig(newConfig.autoSave);\n        }\n        \n        if (this.reportingSystem && newConfig.reporting) {\n            this.reportingSystem.updateConfig(newConfig.reporting);\n        }\n        \n        if (this.fallbackManager && newConfig.fallbacks) {\n            this.fallbackManager.updateConfig(newConfig.fallbacks);\n        }\n        \n        console.log('Error handling integration configuration updated:', this.config);\n    }\n    \n    /**\n     * Test error handling (for debugging)\n     */\n    testErrorHandling() {\n        console.log('Testing error handling system...');\n        \n        // Test error reporting\n        this.reportError({\n            type: 'test_error',\n            message: 'This is a test error',\n            severity: 'medium',\n            source: 'test'\n        });\n        \n        // Test auto-save\n        if (this.autoSaveManager) {\n            this.autoSaveManager.performAutoSave();\n        }\n        \n        // Test fallback activation\n        if (this.fallbackManager) {\n            this.fallbackManager.activateFallback('rendering', 'test');\n        }\n        \n        console.log('Error handling test completed');\n    }\n    \n    /**\n     * Cleanup and destroy\n     */\n    async destroy() {\n        console.log('Destroying Error Handling Integration...');\n        \n        // Final save and reports\n        await this.handlePageUnload();\n        \n        // Destroy components\n        if (this.errorHandler) {\n            this.errorHandler.destroy();\n        }\n        \n        if (this.autoSaveManager) {\n            this.autoSaveManager.destroy();\n        }\n        \n        if (this.reportingSystem) {\n            this.reportingSystem.destroy();\n        }\n        \n        if (this.fallbackManager) {\n            await this.fallbackManager.destroy();\n        }\n        \n        // Clear references\n        this.errorHandler = null;\n        this.autoSaveManager = null;\n        this.reportingSystem = null;\n        this.fallbackManager = null;\n        \n        this.initialized = false;\n        \n        console.log('Error Handling Integration destroyed');\n    }\n}\n\nexport default ErrorHandlingIntegration;"