/**\n * Cross-Platform Integration\n * Integrates all cross-platform components and provides a unified interface\n */\nimport CrossPlatformManager from './CrossPlatformManager.js';\nimport ResponsiveUIManager from './ResponsiveUIManager.js';\nimport PlatformOptimizer from './PlatformOptimizer.js';\n\nclass CrossPlatformIntegration {\n    constructor(gameEngine) {\n        this.gameEngine = gameEngine;\n        \n        // Initialize cross-platform components\n        this.crossPlatformManager = new CrossPlatformManager(gameEngine);\n        this.responsiveUIManager = new ResponsiveUIManager(this.crossPlatformManager);\n        this.platformOptimizer = new PlatformOptimizer(this.crossPlatformManager);\n        \n        // Integration state\n        this.initialized = false;\n        this.adaptiveControlsEnabled = true;\n        this.platformSpecificFeaturesEnabled = true;\n        \n        this.initialize();\n    }\n    \n    /**\n     * Initialize cross-platform integration\n     */\n    initialize() {\n        console.log('Initializing Cross-Platform Integration...');\n        \n        // Setup adaptive controls\n        this.setupAdaptiveControls();\n        \n        // Setup platform-specific features\n        this.setupPlatformSpecificFeatures();\n        \n        // Setup responsive UI scaling\n        this.setupResponsiveUIScaling();\n        \n        // Setup performance monitoring\n        this.setupPerformanceMonitoring();\n        \n        // Setup event handlers\n        this.setupEventHandlers();\n        \n        this.initialized = true;\n        console.log('Cross-Platform Integration initialized successfully');\n        \n        // Notify game engine\n        if (this.gameEngine && this.gameEngine.onCrossPlatformReady) {\n            this.gameEngine.onCrossPlatformReady(this);\n        }\n    }\n    \n    /**\n     * Setup adaptive controls for different input methods\n     */\n    setupAdaptiveControls() {\n        const platform = this.crossPlatformManager.platform;\n        \n        // Configure input methods based on platform\n        const inputConfig = {\n            keyboard: platform.type === 'desktop',\n            mouse: platform.type === 'desktop',\n            touch: platform.capabilities.touch,\n            gamepad: platform.capabilities.gamepad\n        };\n        \n        // Apply input configuration to game engine\n        if (this.gameEngine && this.gameEngine.configureInput) {\n            this.gameEngine.configureInput(inputConfig);\n        }\n        \n        // Setup input method switching\n        this.setupInputMethodSwitching();\n        \n        // Setup control scheme adaptation\n        this.setupControlSchemeAdaptation();\n    }\n    \n    /**\n     * Setup input method switching\n     */\n    setupInputMethodSwitching() {\n        let lastInputMethod = null;\n        \n        // Detect keyboard input\n        document.addEventListener('keydown', () => {\n            if (lastInputMethod !== 'keyboard') {\n                lastInputMethod = 'keyboard';\n                this.switchInputMethod('keyboard');\n            }\n        });\n        \n        // Detect mouse input\n        document.addEventListener('mousemove', () => {\n            if (lastInputMethod !== 'mouse') {\n                lastInputMethod = 'mouse';\n                this.switchInputMethod('mouse');\n            }\n        });\n        \n        // Detect touch input\n        document.addEventListener('touchstart', () => {\n            if (lastInputMethod !== 'touch') {\n                lastInputMethod = 'touch';\n                this.switchInputMethod('touch');\n            }\n        });\n        \n        // Detect gamepad input\n        if (this.crossPlatformManager.platform.capabilities.gamepad) {\n            this.setupGamepadDetection();\n        }\n    }\n    \n    /**\n     * Setup gamepad detection\n     */\n    setupGamepadDetection() {\n        let gamepadConnected = false;\n        \n        window.addEventListener('gamepadconnected', (e) => {\n            gamepadConnected = true;\n            console.log('Gamepad connected:', e.gamepad.id);\n            this.switchInputMethod('gamepad');\n        });\n        \n        window.addEventListener('gamepaddisconnected', (e) => {\n            gamepadConnected = false;\n            console.log('Gamepad disconnected:', e.gamepad.id);\n            this.switchInputMethod('keyboard'); // Fallback to keyboard\n        });\n        \n        // Poll for gamepad input\n        const pollGamepad = () => {\n            if (gamepadConnected) {\n                const gamepads = navigator.getGamepads();\n                for (let i = 0; i < gamepads.length; i++) {\n                    const gamepad = gamepads[i];\n                    if (gamepad) {\n                        // Check for any button press or axis movement\n                        const hasInput = gamepad.buttons.some(button => button.pressed) ||\n                                       gamepad.axes.some(axis => Math.abs(axis) > 0.1);\n                        \n                        if (hasInput) {\n                            this.switchInputMethod('gamepad');\n                            break;\n                        }\n                    }\n                }\n            }\n            requestAnimationFrame(pollGamepad);\n        };\n        \n        requestAnimationFrame(pollGamepad);\n    }\n    \n    /**\n     * Switch input method\n     */\n    switchInputMethod(method) {\n        console.log('Switching to input method:', method);\n        \n        // Update UI to show appropriate controls\n        document.body.classList.remove('input-keyboard', 'input-mouse', 'input-touch', 'input-gamepad');\n        document.body.classList.add(`input-${method}`);\n        \n        // Show/hide control hints\n        this.updateControlHints(method);\n        \n        // Notify game engine\n        if (this.gameEngine && this.gameEngine.onInputMethodChanged) {\n            this.gameEngine.onInputMethodChanged(method);\n        }\n    }\n    \n    /**\n     * Update control hints based on input method\n     */\n    updateControlHints(method) {\n        const hints = {\n            keyboard: {\n                move: 'WASD',\n                shoot: 'Space',\n                brake: 'S',\n                pause: 'Esc'\n            },\n            mouse: {\n                move: 'Mouse',\n                shoot: 'Left Click',\n                brake: 'Right Click',\n                pause: 'Esc'\n            },\n            touch: {\n                move: 'Virtual Joystick',\n                shoot: 'Tap Shoot Button',\n                brake: 'Tap Brake Button',\n                pause: 'Tap Pause Button'\n            },\n            gamepad: {\n                move: 'Left Stick',\n                shoot: 'A Button',\n                brake: 'Left Trigger',\n                pause: 'Start Button'\n            }\n        };\n        \n        const currentHints = hints[method] || hints.keyboard;\n        \n        // Update hint elements\n        Object.keys(currentHints).forEach(action => {\n            const hintElement = document.querySelector(`[data-control-hint=\"${action}\"]`);\n            if (hintElement) {\n                hintElement.textContent = currentHints[action];\n            }\n        });\n    }\n    \n    /**\n     * Setup control scheme adaptation\n     */\n    setupControlSchemeAdaptation() {\n        const platform = this.crossPlatformManager.platform;\n        \n        // Adapt control sensitivity based on platform\n        const sensitivityConfig = {\n            mouse: platform.type === 'desktop' ? 1.0 : 0.8,\n            touch: platform.type === 'mobile' ? 1.2 : 1.0,\n            gamepad: 1.0\n        };\n        \n        // Apply sensitivity configuration\n        if (this.gameEngine && this.gameEngine.configureSensitivity) {\n            this.gameEngine.configureSensitivity(sensitivityConfig);\n        }\n    }\n    \n    /**\n     * Setup platform-specific features\n     */\n    setupPlatformSpecificFeatures() {\n        const platform = this.crossPlatformManager.platform;\n        const optimizations = this.platformOptimizer.getCurrentOptimizations();\n        \n        // Windows-specific features\n        if (platform.os === 'windows') {\n            this.enableWindowsFeatures(optimizations);\n        }\n        \n        // macOS-specific features\n        if (platform.os === 'macos') {\n            this.enableMacOSFeatures(optimizations);\n        }\n        \n        // Linux-specific features\n        if (platform.os === 'linux') {\n            this.enableLinuxFeatures(optimizations);\n        }\n        \n        // Mobile-specific features\n        if (platform.type === 'mobile') {\n            this.enableMobileFeatures(optimizations);\n        }\n    }\n    \n    /**\n     * Enable Windows-specific features\n     */\n    enableWindowsFeatures(optimizations) {\n        console.log('Enabling Windows-specific features');\n        \n        // Enable Windows Game Mode integration\n        if (optimizations.performance.enableGameMode) {\n            this.requestGameMode();\n        }\n        \n        // Setup DirectX preferences\n        if (optimizations.rendering.preferDirectX) {\n            this.setupDirectXPreferences();\n        }\n    }\n    \n    /**\n     * Enable macOS-specific features\n     */\n    enableMacOSFeatures(optimizations) {\n        console.log('Enabling macOS-specific features');\n        \n        // Enable Metal performance shaders\n        if (optimizations.performance.enableMetalPerformanceShaders) {\n            this.setupMetalOptimizations();\n        }\n        \n        // Setup thermal throttling\n        if (optimizations.performance.thermalThrottling) {\n            this.setupMacOSThermalThrottling();\n        }\n    }\n    \n    /**\n     * Enable Linux-specific features\n     */\n    enableLinuxFeatures(optimizations) {\n        console.log('Enabling Linux-specific features');\n        \n        // Enable Vulkan preferences\n        if (optimizations.rendering.preferVulkan) {\n            this.setupVulkanPreferences();\n        }\n        \n        // Setup CPU governor optimization\n        if (optimizations.performance.cpuGovernor) {\n            this.setupCPUGovernorOptimization();\n        }\n    }\n    \n    /**\n     * Enable mobile-specific features\n     */\n    enableMobileFeatures(optimizations) {\n        console.log('Enabling mobile-specific features');\n        \n        // Enable battery optimization\n        if (optimizations.performance.batteryOptimization) {\n            this.setupBatteryOptimization();\n        }\n        \n        // Enable thermal throttling\n        if (optimizations.performance.thermalThrottling) {\n            this.setupMobileThermalThrottling();\n        }\n        \n        // Setup haptic feedback\n        if (optimizations.input.hapticFeedback) {\n            this.setupHapticFeedback();\n        }\n    }\n    \n    /**\n     * Setup responsive UI scaling\n     */\n    setupResponsiveUIScaling() {\n        // Get current breakpoint and scaling factors\n        const breakpoint = this.responsiveUIManager.getCurrentBreakpoint();\n        const scaling = this.responsiveUIManager.getScalingFactors();\n        \n        console.log(`Setting up responsive UI for ${breakpoint} with scaling:`, scaling);\n        \n        // Apply scaling to game UI elements\n        if (this.gameEngine && this.gameEngine.updateUIScaling) {\n            this.gameEngine.updateUIScaling(scaling);\n        }\n        \n        // Setup dynamic scaling based on screen size changes\n        this.setupDynamicScaling();\n    }\n    \n    /**\n     * Setup dynamic scaling\n     */\n    setupDynamicScaling() {\n        let resizeTimeout;\n        \n        window.addEventListener('resize', () => {\n            clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(() => {\n                const newScaling = this.responsiveUIManager.getScalingFactors();\n                if (this.gameEngine && this.gameEngine.updateUIScaling) {\n                    this.gameEngine.updateUIScaling(newScaling);\n                }\n            }, 250); // Debounce resize events\n        });\n    }\n    \n    /**\n     * Setup performance monitoring\n     */\n    setupPerformanceMonitoring() {\n        // Monitor FPS and adjust quality accordingly\n        let frameCount = 0;\n        let lastTime = performance.now();\n        \n        const monitorPerformance = () => {\n            frameCount++;\n            const currentTime = performance.now();\n            \n            if (currentTime - lastTime >= 1000) {\n                const fps = frameCount;\n                frameCount = 0;\n                lastTime = currentTime;\n                \n                // Adjust quality based on FPS\n                this.adjustQualityBasedOnPerformance(fps);\n            }\n            \n            requestAnimationFrame(monitorPerformance);\n        };\n        \n        requestAnimationFrame(monitorPerformance);\n    }\n    \n    /**\n     * Adjust quality based on performance\n     */\n    adjustQualityBasedOnPerformance(fps) {\n        const targetFPS = this.platformOptimizer.getCurrentOptimizations().performance.targetFPS || 60;\n        \n        if (fps < targetFPS * 0.8) {\n            // Performance is poor, reduce quality\n            this.reduceQuality();\n        } else if (fps > targetFPS * 1.1) {\n            // Performance is good, can increase quality\n            this.increaseQuality();\n        }\n    }\n    \n    /**\n     * Reduce quality settings\n     */\n    reduceQuality() {\n        if (this.gameEngine && this.gameEngine.reduceQuality) {\n            this.gameEngine.reduceQuality();\n        }\n    }\n    \n    /**\n     * Increase quality settings\n     */\n    increaseQuality() {\n        if (this.gameEngine && this.gameEngine.increaseQuality) {\n            this.gameEngine.increaseQuality();\n        }\n    }\n    \n    /**\n     * Setup event handlers\n     */\n    setupEventHandlers() {\n        // Handle thermal throttling events\n        window.addEventListener('thermal-throttle', (e) => {\n            this.handleThermalThrottle(e.detail.level);\n        });\n        \n        // Handle battery events\n        window.addEventListener('battery-low', (e) => {\n            this.handleBatteryLow(e.detail);\n        });\n        \n        // Handle orientation changes\n        window.addEventListener('orientationchange', () => {\n            this.handleOrientationChange();\n        });\n        \n        // Handle visibility changes\n        document.addEventListener('visibilitychange', () => {\n            this.handleVisibilityChange();\n        });\n    }\n    \n    /**\n     * Handle thermal throttling\n     */\n    handleThermalThrottle(level) {\n        console.log('Thermal throttling level:', level);\n        \n        if (level === 'high') {\n            // Aggressive throttling\n            if (this.gameEngine && this.gameEngine.enableThermalThrottling) {\n                this.gameEngine.enableThermalThrottling('aggressive');\n            }\n        } else if (level === 'medium') {\n            // Moderate throttling\n            if (this.gameEngine && this.gameEngine.enableThermalThrottling) {\n                this.gameEngine.enableThermalThrottling('moderate');\n            }\n        } else {\n            // No throttling needed\n            if (this.gameEngine && this.gameEngine.disableThermalThrottling) {\n                this.gameEngine.disableThermalThrottling();\n            }\n        }\n    }\n    \n    /**\n     * Handle low battery\n     */\n    handleBatteryLow(batteryInfo) {\n        console.log('Battery low:', batteryInfo);\n        \n        // Enable aggressive power saving\n        if (this.gameEngine && this.gameEngine.enablePowerSaving) {\n            this.gameEngine.enablePowerSaving('aggressive');\n        }\n    }\n    \n    /**\n     * Handle orientation change\n     */\n    handleOrientationChange() {\n        // Update responsive UI\n        setTimeout(() => {\n            const newScaling = this.responsiveUIManager.getScalingFactors();\n            if (this.gameEngine && this.gameEngine.updateUIScaling) {\n                this.gameEngine.updateUIScaling(newScaling);\n            }\n        }, 100);\n    }\n    \n    /**\n     * Handle visibility change\n     */\n    handleVisibilityChange() {\n        if (document.hidden) {\n            // Game went to background\n            if (this.gameEngine && this.gameEngine.onBackground) {\n                this.gameEngine.onBackground();\n            }\n        } else {\n            // Game came to foreground\n            if (this.gameEngine && this.gameEngine.onForeground) {\n                this.gameEngine.onForeground();\n            }\n        }\n    }\n    \n    // Platform-specific feature implementations (stubs)\n    requestGameMode() { /* Windows Game Mode request */ }\n    setupDirectXPreferences() { /* DirectX setup */ }\n    setupMetalOptimizations() { /* Metal optimizations */ }\n    setupMacOSThermalThrottling() { /* macOS thermal throttling */ }\n    setupVulkanPreferences() { /* Vulkan setup */ }\n    setupCPUGovernorOptimization() { /* Linux CPU governor */ }\n    setupBatteryOptimization() { /* Battery optimization */ }\n    setupMobileThermalThrottling() { /* Mobile thermal throttling */ }\n    setupHapticFeedback() { /* Haptic feedback setup */ }\n    \n    /**\n     * Get platform information\n     */\n    getPlatformInfo() {\n        return this.crossPlatformManager.getPlatformInfo();\n    }\n    \n    /**\n     * Get current optimizations\n     */\n    getCurrentOptimizations() {\n        return this.platformOptimizer.getCurrentOptimizations();\n    }\n    \n    /**\n     * Get recommended settings\n     */\n    getRecommendedSettings() {\n        return this.platformOptimizer.getRecommendedSettings();\n    }\n    \n    /**\n     * Enable/disable adaptive controls\n     */\n    setAdaptiveControlsEnabled(enabled) {\n        this.adaptiveControlsEnabled = enabled;\n        \n        if (enabled) {\n            this.setupAdaptiveControls();\n        } else {\n            // Disable adaptive controls\n            document.body.classList.remove('input-keyboard', 'input-mouse', 'input-touch', 'input-gamepad');\n        }\n    }\n    \n    /**\n     * Enable/disable platform-specific features\n     */\n    setPlatformSpecificFeaturesEnabled(enabled) {\n        this.platformSpecificFeaturesEnabled = enabled;\n        \n        if (enabled) {\n            this.setupPlatformSpecificFeatures();\n        }\n    }\n    \n    /**\n     * Cleanup\n     */\n    destroy() {\n        if (this.crossPlatformManager) {\n            this.crossPlatformManager.destroy();\n        }\n        \n        if (this.responsiveUIManager) {\n            this.responsiveUIManager.destroy();\n        }\n        \n        // Remove event listeners\n        window.removeEventListener('thermal-throttle', this.handleThermalThrottle);\n        window.removeEventListener('battery-low', this.handleBatteryLow);\n        window.removeEventListener('orientationchange', this.handleOrientationChange);\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n        \n        this.initialized = false;\n    }\n}\n\nexport default CrossPlatformIntegration;"