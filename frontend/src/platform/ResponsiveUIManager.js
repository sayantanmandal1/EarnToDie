/**\n * Responsive UI Manager\n * Handles adaptive UI scaling and layout for different screen sizes and platforms\n */\nclass ResponsiveUIManager {\n    constructor(crossPlatformManager) {\n        this.crossPlatformManager = crossPlatformManager;\n        this.platform = crossPlatformManager.platform;\n        \n        // Breakpoints for different screen sizes\n        this.breakpoints = {\n            mobile: { max: 768 },\n            tablet: { min: 769, max: 1024 },\n            desktop: { min: 1025, max: 1920 },\n            ultrawide: { min: 1921 }\n        };\n        \n        // UI scaling factors\n        this.scalingFactors = {\n            mobile: {\n                base: 0.8,\n                text: 1.2,\n                buttons: 1.4,\n                hud: 1.1\n            },\n            tablet: {\n                base: 0.9,\n                text: 1.1,\n                buttons: 1.2,\n                hud: 1.0\n            },\n            desktop: {\n                base: 1.0,\n                text: 1.0,\n                buttons: 1.0,\n                hud: 1.0\n            },\n            ultrawide: {\n                base: 1.1,\n                text: 1.0,\n                buttons: 1.0,\n                hud: 0.9\n            }\n        };\n        \n        // Layout configurations\n        this.layouts = {\n            mobile: {\n                hudPosition: 'compact',\n                menuStyle: 'fullscreen',\n                buttonLayout: 'stacked',\n                textSize: 'large'\n            },\n            tablet: {\n                hudPosition: 'standard',\n                menuStyle: 'overlay',\n                buttonLayout: 'grid',\n                textSize: 'medium'\n            },\n            desktop: {\n                hudPosition: 'extended',\n                menuStyle: 'sidebar',\n                buttonLayout: 'horizontal',\n                textSize: 'standard'\n            }\n        };\n        \n        this.currentBreakpoint = null;\n        this.currentLayout = null;\n        \n        this.initialize();\n    }\n    \n    /**\n     * Initialize responsive UI manager\n     */\n    initialize() {\n        this.detectBreakpoint();\n        this.applyResponsiveStyles();\n        this.setupEventListeners();\n        \n        console.log('Responsive UI Manager initialized for:', this.currentBreakpoint);\n    }\n    \n    /**\n     * Detect current breakpoint based on screen size\n     */\n    detectBreakpoint() {\n        const width = this.platform.screen.width;\n        \n        if (width <= this.breakpoints.mobile.max) {\n            this.currentBreakpoint = 'mobile';\n        } else if (width >= this.breakpoints.tablet.min && width <= this.breakpoints.tablet.max) {\n            this.currentBreakpoint = 'tablet';\n        } else if (width >= this.breakpoints.desktop.min && width <= this.breakpoints.desktop.max) {\n            this.currentBreakpoint = 'desktop';\n        } else {\n            this.currentBreakpoint = 'ultrawide';\n        }\n        \n        this.currentLayout = this.layouts[this.currentBreakpoint] || this.layouts.desktop;\n    }\n    \n    /**\n     * Apply responsive styles\n     */\n    applyResponsiveStyles() {\n        this.createResponsiveStylesheet();\n        this.updateCSSVariables();\n        this.applyLayoutClasses();\n    }\n    \n    /**\n     * Create responsive stylesheet\n     */\n    createResponsiveStylesheet() {\n        // Remove existing responsive stylesheet\n        const existingStyle = document.getElementById('responsive-ui-styles');\n        if (existingStyle) {\n            existingStyle.remove();\n        }\n        \n        const style = document.createElement('style');\n        style.id = 'responsive-ui-styles';\n        style.textContent = this.generateResponsiveCSS();\n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Generate responsive CSS\n     */\n    generateResponsiveCSS() {\n        const scaling = this.scalingFactors[this.currentBreakpoint];\n        \n        return `\n            /* Base responsive styles */\n            .responsive-ui {\n                --base-scale: ${scaling.base};\n                --text-scale: ${scaling.text};\n                --button-scale: ${scaling.buttons};\n                --hud-scale: ${scaling.hud};\n            }\n            \n            /* Mobile styles */\n            @media (max-width: ${this.breakpoints.mobile.max}px) {\n                .game-hud {\n                    position: fixed;\n                    bottom: 0;\n                    left: 0;\n                    right: 0;\n                    height: auto;\n                    padding: 10px;\n                    background: rgba(0, 0, 0, 0.8);\n                }\n                \n                .main-menu {\n                    padding: 20px;\n                    text-align: center;\n                }\n                \n                .menu-button {\n                    width: 100%;\n                    margin: 10px 0;\n                    padding: 15px;\n                    font-size: calc(16px * var(--text-scale));\n                }\n                \n                .settings-panel {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background: rgba(0, 0, 0, 0.95);\n                    overflow-y: auto;\n                }\n                \n                .touch-controls {\n                    display: block !important;\n                }\n                \n                .desktop-only {\n                    display: none !important;\n                }\n            }\n            \n            /* Tablet styles */\n            @media (min-width: ${this.breakpoints.tablet.min}px) and (max-width: ${this.breakpoints.tablet.max}px) {\n                .game-hud {\n                    display: grid;\n                    grid-template-columns: 1fr auto 1fr;\n                    grid-template-rows: auto 1fr auto;\n                    gap: 10px;\n                    padding: 15px;\n                }\n                \n                .main-menu {\n                    display: grid;\n                    grid-template-columns: repeat(2, 1fr);\n                    gap: 20px;\n                    padding: 40px;\n                }\n                \n                .menu-button {\n                    padding: 20px;\n                    font-size: calc(18px * var(--text-scale));\n                }\n                \n                .settings-panel {\n                    position: fixed;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    width: 80%;\n                    max-width: 600px;\n                    height: 80%;\n                    background: rgba(0, 0, 0, 0.9);\n                    border-radius: 10px;\n                    overflow-y: auto;\n                }\n            }\n            \n            /* Desktop styles */\n            @media (min-width: ${this.breakpoints.desktop.min}px) {\n                .game-hud {\n                    display: grid;\n                    grid-template-columns: auto 1fr auto;\n                    grid-template-rows: auto 1fr auto;\n                    gap: 20px;\n                    padding: 20px;\n                }\n                \n                .main-menu {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    justify-content: center;\n                    padding: 60px;\n                }\n                \n                .menu-button {\n                    width: 300px;\n                    margin: 10px;\n                    padding: 15px 30px;\n                    font-size: 18px;\n                }\n                \n                .settings-panel {\n                    position: fixed;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    width: 800px;\n                    height: 600px;\n                    background: rgba(0, 0, 0, 0.9);\n                    border-radius: 10px;\n                    overflow: hidden;\n                }\n                \n                .touch-controls {\n                    display: none !important;\n                }\n                \n                .mobile-only {\n                    display: none !important;\n                }\n            }\n            \n            /* Ultrawide styles */\n            @media (min-width: ${this.breakpoints.ultrawide.min}px) {\n                .game-hud {\n                    grid-template-columns: 300px 1fr 300px;\n                    padding: 30px;\n                }\n                \n                .main-menu {\n                    padding: 80px;\n                }\n                \n                .settings-panel {\n                    width: 1000px;\n                    height: 700px;\n                }\n            }\n            \n            /* Orientation-specific styles */\n            @media (orientation: portrait) {\n                .landscape-only {\n                    display: none !important;\n                }\n                \n                .portrait-warning {\n                    display: block !important;\n                }\n            }\n            \n            @media (orientation: landscape) {\n                .portrait-only {\n                    display: none !important;\n                }\n                \n                .portrait-warning {\n                    display: none !important;\n                }\n            }\n            \n            /* High DPI styles */\n            @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n                .high-dpi-text {\n                    font-weight: 300;\n                }\n                \n                .icon {\n                    image-rendering: -webkit-optimize-contrast;\n                }\n            }\n            \n            /* Accessibility styles */\n            @media (prefers-reduced-motion: reduce) {\n                * {\n                    animation-duration: 0.01ms !important;\n                    animation-iteration-count: 1 !important;\n                    transition-duration: 0.01ms !important;\n                }\n            }\n            \n            @media (prefers-contrast: high) {\n                .game-ui {\n                    filter: contrast(1.5);\n                }\n            }\n            \n            /* Dark mode support */\n            @media (prefers-color-scheme: dark) {\n                .auto-theme {\n                    background-color: #1a1a1a;\n                    color: #ffffff;\n                }\n            }\n            \n            @media (prefers-color-scheme: light) {\n                .auto-theme {\n                    background-color: #ffffff;\n                    color: #000000;\n                }\n            }\n        `;\n    }\n    \n    /**\n     * Update CSS variables\n     */\n    updateCSSVariables() {\n        const root = document.documentElement;\n        const scaling = this.scalingFactors[this.currentBreakpoint];\n        \n        root.style.setProperty('--responsive-base-scale', scaling.base.toString());\n        root.style.setProperty('--responsive-text-scale', scaling.text.toString());\n        root.style.setProperty('--responsive-button-scale', scaling.buttons.toString());\n        root.style.setProperty('--responsive-hud-scale', scaling.hud.toString());\n        \n        // Screen size variables\n        root.style.setProperty('--screen-width', `${this.platform.screen.width}px`);\n        root.style.setProperty('--screen-height', `${this.platform.screen.height}px`);\n        root.style.setProperty('--pixel-ratio', this.platform.screen.pixelRatio.toString());\n        \n        // Safe area variables for mobile devices\n        if (this.currentBreakpoint === 'mobile') {\n            root.style.setProperty('--safe-area-top', 'env(safe-area-inset-top, 20px)');\n            root.style.setProperty('--safe-area-bottom', 'env(safe-area-inset-bottom, 20px)');\n            root.style.setProperty('--safe-area-left', 'env(safe-area-inset-left, 20px)');\n            root.style.setProperty('--safe-area-right', 'env(safe-area-inset-right, 20px)');\n        }\n    }\n    \n    /**\n     * Apply layout classes\n     */\n    applyLayoutClasses() {\n        const body = document.body;\n        \n        // Remove existing responsive classes\n        body.classList.remove('mobile-layout', 'tablet-layout', 'desktop-layout', 'ultrawide-layout');\n        \n        // Add current breakpoint class\n        body.classList.add(`${this.currentBreakpoint}-layout`);\n        body.classList.add('responsive-ui');\n        \n        // Add platform-specific classes\n        body.classList.add(`platform-${this.platform.type}`);\n        body.classList.add(`os-${this.platform.os}`);\n        body.classList.add(`browser-${this.platform.browser}`);\n        \n        // Add capability classes\n        Object.keys(this.platform.capabilities).forEach(capability => {\n            if (this.platform.capabilities[capability]) {\n                body.classList.add(`has-${capability}`);\n            } else {\n                body.classList.add(`no-${capability}`);\n            }\n        });\n        \n        // Add performance tier class\n        body.classList.add(`performance-${this.platform.performance.tier}`);\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Listen for screen size changes\n        window.addEventListener('resize', () => {\n            this.handleResize();\n        });\n        \n        // Listen for orientation changes\n        window.addEventListener('orientationchange', () => {\n            setTimeout(() => {\n                this.handleOrientationChange();\n            }, 100);\n        });\n    }\n    \n    /**\n     * Handle resize events\n     */\n    handleResize() {\n        const previousBreakpoint = this.currentBreakpoint;\n        \n        // Update platform screen info\n        this.crossPlatformManager.updateScreenInfo();\n        this.platform = this.crossPlatformManager.platform;\n        \n        // Detect new breakpoint\n        this.detectBreakpoint();\n        \n        // Apply changes if breakpoint changed\n        if (previousBreakpoint !== this.currentBreakpoint) {\n            console.log(`Breakpoint changed from ${previousBreakpoint} to ${this.currentBreakpoint}`);\n            this.applyResponsiveStyles();\n        } else {\n            // Just update CSS variables\n            this.updateCSSVariables();\n        }\n    }\n    \n    /**\n     * Handle orientation changes\n     */\n    handleOrientationChange() {\n        this.handleResize();\n        \n        // Additional orientation-specific handling\n        if (this.platform.screen.orientation === 'portrait' && this.currentBreakpoint === 'mobile') {\n            this.showPortraitWarning();\n        } else {\n            this.hidePortraitWarning();\n        }\n    }\n    \n    /**\n     * Show portrait warning for mobile games\n     */\n    showPortraitWarning() {\n        let warning = document.getElementById('portrait-warning');\n        if (warning) return;\n        \n        warning = document.createElement('div');\n        warning.id = 'portrait-warning';\n        warning.className = 'portrait-warning';\n        warning.innerHTML = `\n            <div style=\"\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.9);\n                color: white;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n                z-index: 10001;\n                text-align: center;\n                padding: 20px;\n            \">\n                <div style=\"font-size: 48px; margin-bottom: 20px;\">📱</div>\n                <h2 style=\"margin-bottom: 10px;\">Rotate Your Device</h2>\n                <p>This game is optimized for landscape mode</p>\n            </div>\n        `;\n        \n        document.body.appendChild(warning);\n    }\n    \n    /**\n     * Hide portrait warning\n     */\n    hidePortraitWarning() {\n        const warning = document.getElementById('portrait-warning');\n        if (warning) {\n            warning.remove();\n        }\n    }\n    \n    /**\n     * Get current breakpoint\n     */\n    getCurrentBreakpoint() {\n        return this.currentBreakpoint;\n    }\n    \n    /**\n     * Get current layout configuration\n     */\n    getCurrentLayout() {\n        return { ...this.currentLayout };\n    }\n    \n    /**\n     * Get scaling factors for current breakpoint\n     */\n    getScalingFactors() {\n        return { ...this.scalingFactors[this.currentBreakpoint] };\n    }\n    \n    /**\n     * Check if current screen size matches breakpoint\n     */\n    isBreakpoint(breakpoint) {\n        return this.currentBreakpoint === breakpoint;\n    }\n    \n    /**\n     * Apply custom scaling to element\n     */\n    applyCustomScaling(element, scalingConfig) {\n        const scaling = this.scalingFactors[this.currentBreakpoint];\n        \n        if (scalingConfig.fontSize) {\n            element.style.fontSize = `calc(${scalingConfig.fontSize}px * ${scaling.text})`;\n        }\n        \n        if (scalingConfig.padding) {\n            element.style.padding = `calc(${scalingConfig.padding}px * ${scaling.base})`;\n        }\n        \n        if (scalingConfig.margin) {\n            element.style.margin = `calc(${scalingConfig.margin}px * ${scaling.base})`;\n        }\n        \n        if (scalingConfig.width) {\n            element.style.width = `calc(${scalingConfig.width}px * ${scaling.base})`;\n        }\n        \n        if (scalingConfig.height) {\n            element.style.height = `calc(${scalingConfig.height}px * ${scaling.base})`;\n        }\n    }\n    \n    /**\n     * Cleanup\n     */\n    destroy() {\n        // Remove event listeners\n        window.removeEventListener('resize', this.handleResize);\n        window.removeEventListener('orientationchange', this.handleOrientationChange);\n        \n        // Remove responsive stylesheet\n        const style = document.getElementById('responsive-ui-styles');\n        if (style) {\n            style.remove();\n        }\n        \n        // Remove responsive classes\n        const body = document.body;\n        body.classList.remove('responsive-ui', `${this.currentBreakpoint}-layout`);\n        \n        // Remove warnings\n        this.hidePortraitWarning();\n    }\n}\n\nexport default ResponsiveUIManager;"