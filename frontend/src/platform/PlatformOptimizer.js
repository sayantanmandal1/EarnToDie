/**\n * Platform-Specific Optimizer\n * Handles Windows, macOS, and Linux optimizations\n */\nclass PlatformOptimizer {\n    constructor(crossPlatformManager) {\n        this.crossPlatformManager = crossPlatformManager;\n        this.platform = crossPlatformManager.platform;\n        \n        // Platform-specific optimizations\n        this.optimizations = {\n            windows: {\n                rendering: {\n                    preferDirectX: true,\n                    enableHardwareAcceleration: true,\n                    vsyncMode: 'adaptive',\n                    textureCompression: 'dxt'\n                },\n                audio: {\n                    preferWASAPI: true,\n                    bufferSize: 512,\n                    sampleRate: 44100\n                },\n                input: {\n                    enableRawInput: true,\n                    mouseAcceleration: false,\n                    keyboardLayout: 'qwerty'\n                },\n                performance: {\n                    enableGameMode: true,\n                    priorityClass: 'high',\n                    powerProfile: 'performance'\n                }\n            },\n            macos: {\n                rendering: {\n                    preferMetal: true,\n                    enableHardwareAcceleration: true,\n                    vsyncMode: 'on',\n                    textureCompression: 'astc'\n                },\n                audio: {\n                    preferCoreAudio: true,\n                    bufferSize: 256,\n                    sampleRate: 48000\n                },\n                input: {\n                    enableCocoa: true,\n                    mouseAcceleration: true,\n                    keyboardLayout: 'qwerty'\n                },\n                performance: {\n                    enableMetalPerformanceShaders: true,\n                    thermalThrottling: true,\n                    powerProfile: 'balanced'\n                }\n            },\n            linux: {\n                rendering: {\n                    preferVulkan: true,\n                    enableHardwareAcceleration: true,\n                    vsyncMode: 'mailbox',\n                    textureCompression: 'etc2'\n                },\n                audio: {\n                    preferPulseAudio: true,\n                    bufferSize: 1024,\n                    sampleRate: 44100\n                },\n                input: {\n                    enableX11: true,\n                    mouseAcceleration: false,\n                    keyboardLayout: 'auto'\n                },\n                performance: {\n                    enableThreading: true,\n                    cpuGovernor: 'performance',\n                    powerProfile: 'performance'\n                }\n            },\n            ios: {\n                rendering: {\n                    preferMetal: true,\n                    enableHardwareAcceleration: true,\n                    vsyncMode: 'on',\n                    textureCompression: 'astc',\n                    maxTextureSize: 2048\n                },\n                audio: {\n                    preferAVAudioEngine: true,\n                    bufferSize: 256,\n                    sampleRate: 44100,\n                    enableSpatialAudio: true\n                },\n                input: {\n                    touchSensitivity: 'high',\n                    gestureRecognition: true,\n                    hapticFeedback: true\n                },\n                performance: {\n                    thermalThrottling: true,\n                    batteryOptimization: true,\n                    backgroundProcessing: false\n                }\n            },\n            android: {\n                rendering: {\n                    preferVulkan: true,\n                    enableHardwareAcceleration: true,\n                    vsyncMode: 'adaptive',\n                    textureCompression: 'etc2',\n                    maxTextureSize: 1024\n                },\n                audio: {\n                    preferAAudio: true,\n                    bufferSize: 512,\n                    sampleRate: 44100,\n                    lowLatencyMode: true\n                },\n                input: {\n                    touchSensitivity: 'medium',\n                    gestureRecognition: true,\n                    hapticFeedback: false\n                },\n                performance: {\n                    thermalThrottling: true,\n                    batteryOptimization: true,\n                    backgroundProcessing: false,\n                    enableGPUProfiling: true\n                }\n            }\n        };\n        \n        // Browser-specific optimizations\n        this.browserOptimizations = {\n            chrome: {\n                webgl: {\n                    antialias: true,\n                    powerPreference: 'high-performance',\n                    failIfMajorPerformanceCaveat: false\n                },\n                audio: {\n                    enableWebAudio: true,\n                    enableAudioWorklet: true\n                },\n                features: {\n                    enableOffscreenCanvas: true,\n                    enableSharedArrayBuffer: true,\n                    enableWebAssembly: true\n                }\n            },\n            firefox: {\n                webgl: {\n                    antialias: false,\n                    powerPreference: 'default',\n                    failIfMajorPerformanceCaveat: true\n                },\n                audio: {\n                    enableWebAudio: true,\n                    enableAudioWorklet: false\n                },\n                features: {\n                    enableOffscreenCanvas: false,\n                    enableSharedArrayBuffer: false,\n                    enableWebAssembly: true\n                }\n            },\n            safari: {\n                webgl: {\n                    antialias: true,\n                    powerPreference: 'default',\n                    failIfMajorPerformanceCaveat: false\n                },\n                audio: {\n                    enableWebAudio: true,\n                    enableAudioWorklet: false\n                },\n                features: {\n                    enableOffscreenCanvas: false,\n                    enableSharedArrayBuffer: false,\n                    enableWebAssembly: true\n                }\n            },\n            edge: {\n                webgl: {\n                    antialias: true,\n                    powerPreference: 'high-performance',\n                    failIfMajorPerformanceCaveat: false\n                },\n                audio: {\n                    enableWebAudio: true,\n                    enableAudioWorklet: true\n                },\n                features: {\n                    enableOffscreenCanvas: true,\n                    enableSharedArrayBuffer: true,\n                    enableWebAssembly: true\n                }\n            }\n        };\n        \n        this.currentOptimizations = null;\n        this.initialize();\n    }\n    \n    /**\n     * Initialize platform optimizer\n     */\n    initialize() {\n        this.detectOptimalSettings();\n        this.applyPlatformOptimizations();\n        this.applyBrowserOptimizations();\n        this.setupPlatformSpecificFeatures();\n        \n        console.log('Platform Optimizer initialized for:', this.platform.os, this.platform.browser);\n    }\n    \n    /**\n     * Detect optimal settings for current platform\n     */\n    detectOptimalSettings() {\n        const osOptimizations = this.optimizations[this.platform.os] || this.optimizations.windows;\n        const browserOptimizations = this.browserOptimizations[this.platform.browser] || this.browserOptimizations.chrome;\n        \n        this.currentOptimizations = {\n            ...osOptimizations,\n            browser: browserOptimizations\n        };\n        \n        // Adjust based on performance tier\n        this.adjustForPerformanceTier();\n        \n        // Adjust based on device capabilities\n        this.adjustForCapabilities();\n    }\n    \n    /**\n     * Adjust optimizations based on performance tier\n     */\n    adjustForPerformanceTier() {\n        const tier = this.platform.performance.tier;\n        \n        if (tier === 'low') {\n            // Reduce quality settings for low-end devices\n            this.currentOptimizations.rendering.enableHardwareAcceleration = false;\n            this.currentOptimizations.rendering.vsyncMode = 'off';\n            this.currentOptimizations.audio.bufferSize = 2048;\n            \n            if (this.currentOptimizations.rendering.maxTextureSize) {\n                this.currentOptimizations.rendering.maxTextureSize = Math.min(\n                    this.currentOptimizations.rendering.maxTextureSize,\n                    512\n                );\n            }\n        } else if (tier === 'high') {\n            // Enable advanced features for high-end devices\n            this.currentOptimizations.rendering.enableAdvancedShaders = true;\n            this.currentOptimizations.audio.enableSpatialAudio = true;\n            this.currentOptimizations.performance.enableMultithreading = true;\n        }\n    }\n    \n    /**\n     * Adjust optimizations based on device capabilities\n     */\n    adjustForCapabilities() {\n        const caps = this.platform.capabilities;\n        \n        // WebGL adjustments\n        if (!caps.webgl2) {\n            this.currentOptimizations.rendering.fallbackToWebGL1 = true;\n            this.currentOptimizations.rendering.enableAdvancedShaders = false;\n        }\n        \n        // WebGPU adjustments\n        if (caps.webgpu) {\n            this.currentOptimizations.rendering.preferWebGPU = true;\n        }\n        \n        // Touch adjustments\n        if (caps.touch) {\n            this.currentOptimizations.input.enableTouchOptimizations = true;\n            this.currentOptimizations.input.touchLatency = 'low';\n        }\n        \n        // Gamepad adjustments\n        if (caps.gamepad) {\n            this.currentOptimizations.input.enableGamepadSupport = true;\n        }\n    }\n    \n    /**\n     * Apply platform-specific optimizations\n     */\n    applyPlatformOptimizations() {\n        // Apply rendering optimizations\n        this.applyRenderingOptimizations();\n        \n        // Apply audio optimizations\n        this.applyAudioOptimizations();\n        \n        // Apply input optimizations\n        this.applyInputOptimizations();\n        \n        // Apply performance optimizations\n        this.applyPerformanceOptimizations();\n    }\n    \n    /**\n     * Apply rendering optimizations\n     */\n    applyRenderingOptimizations() {\n        const rendering = this.currentOptimizations.rendering;\n        \n        // Set WebGL context attributes\n        if (window.WebGLRenderingContext) {\n            const originalGetContext = HTMLCanvasElement.prototype.getContext;\n            HTMLCanvasElement.prototype.getContext = function(contextType, contextAttributes = {}) {\n                if (contextType === 'webgl' || contextType === 'webgl2') {\n                    const optimizedAttributes = {\n                        antialias: rendering.antialias !== false,\n                        powerPreference: rendering.powerPreference || 'default',\n                        failIfMajorPerformanceCaveat: rendering.failIfMajorPerformanceCaveat || false,\n                        ...contextAttributes\n                    };\n                    return originalGetContext.call(this, contextType, optimizedAttributes);\n                }\n                return originalGetContext.call(this, contextType, contextAttributes);\n            };\n        }\n        \n        // Set CSS optimizations\n        document.documentElement.style.setProperty('--rendering-quality', rendering.quality || 'auto');\n        \n        // Platform-specific rendering hints\n        if (this.platform.os === 'windows' && rendering.preferDirectX) {\n            document.documentElement.style.setProperty('--prefer-directx', 'true');\n        } else if (this.platform.os === 'macos' && rendering.preferMetal) {\n            document.documentElement.style.setProperty('--prefer-metal', 'true');\n        } else if (this.platform.os === 'linux' && rendering.preferVulkan) {\n            document.documentElement.style.setProperty('--prefer-vulkan', 'true');\n        }\n    }\n    \n    /**\n     * Apply audio optimizations\n     */\n    applyAudioOptimizations() {\n        const audio = this.currentOptimizations.audio;\n        \n        // Set Web Audio API optimizations\n        if (window.AudioContext || window.webkitAudioContext) {\n            const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n            const originalConstructor = AudioContextClass;\n            \n            window.AudioContext = window.webkitAudioContext = function(contextOptions = {}) {\n                const optimizedOptions = {\n                    sampleRate: audio.sampleRate || 44100,\n                    latencyHint: audio.lowLatencyMode ? 'interactive' : 'balanced',\n                    ...contextOptions\n                };\n                return new originalConstructor(optimizedOptions);\n            };\n        }\n        \n        // Set audio buffer size hint\n        document.documentElement.style.setProperty('--audio-buffer-size', audio.bufferSize.toString());\n    }\n    \n    /**\n     * Apply input optimizations\n     */\n    applyInputOptimizations() {\n        const input = this.currentOptimizations.input;\n        \n        // Mouse acceleration settings\n        if (input.mouseAcceleration === false) {\n            document.addEventListener('mousemove', (e) => {\n                // Disable mouse acceleration by normalizing movement\n                if (e.movementX || e.movementY) {\n                    const sensitivity = 1.0;\n                    e.normalizedMovementX = e.movementX * sensitivity;\n                    e.normalizedMovementY = e.movementY * sensitivity;\n                }\n            });\n        }\n        \n        // Touch sensitivity\n        if (input.touchSensitivity) {\n            const sensitivity = {\n                low: 0.8,\n                medium: 1.0,\n                high: 1.2\n            }[input.touchSensitivity] || 1.0;\n            \n            document.documentElement.style.setProperty('--touch-sensitivity', sensitivity.toString());\n        }\n        \n        // Haptic feedback\n        if (input.hapticFeedback && navigator.vibrate) {\n            window.gameHapticFeedback = (pattern) => {\n                navigator.vibrate(pattern);\n            };\n        }\n    }\n    \n    /**\n     * Apply performance optimizations\n     */\n    applyPerformanceOptimizations() {\n        const performance = this.currentOptimizations.performance;\n        \n        // Thermal throttling\n        if (performance.thermalThrottling) {\n            this.setupThermalMonitoring();\n        }\n        \n        // Battery optimization\n        if (performance.batteryOptimization) {\n            this.setupBatteryMonitoring();\n        }\n        \n        // Background processing\n        if (performance.backgroundProcessing === false) {\n            document.addEventListener('visibilitychange', () => {\n                if (document.hidden) {\n                    // Pause non-essential processing\n                    window.dispatchEvent(new CustomEvent('game-background'));\n                } else {\n                    // Resume processing\n                    window.dispatchEvent(new CustomEvent('game-foreground'));\n                }\n            });\n        }\n    }\n    \n    /**\n     * Apply browser-specific optimizations\n     */\n    applyBrowserOptimizations() {\n        const browser = this.currentOptimizations.browser;\n        \n        // Enable browser-specific features\n        if (browser.features.enableOffscreenCanvas && window.OffscreenCanvas) {\n            window.gameSupportsOffscreenCanvas = true;\n        }\n        \n        if (browser.features.enableSharedArrayBuffer && window.SharedArrayBuffer) {\n            window.gameSupportsSharedArrayBuffer = true;\n        }\n        \n        if (browser.features.enableWebAssembly && window.WebAssembly) {\n            window.gameSupportsWebAssembly = true;\n        }\n        \n        // Browser-specific WebGL settings\n        if (browser.webgl) {\n            window.gameWebGLSettings = browser.webgl;\n        }\n    }\n    \n    /**\n     * Setup platform-specific features\n     */\n    setupPlatformSpecificFeatures() {\n        // Windows-specific features\n        if (this.platform.os === 'windows') {\n            this.setupWindowsFeatures();\n        }\n        \n        // macOS-specific features\n        if (this.platform.os === 'macos') {\n            this.setupMacOSFeatures();\n        }\n        \n        // Linux-specific features\n        if (this.platform.os === 'linux') {\n            this.setupLinuxFeatures();\n        }\n        \n        // Mobile-specific features\n        if (this.platform.os === 'ios' || this.platform.os === 'android') {\n            this.setupMobileFeatures();\n        }\n    }\n    \n    /**\n     * Setup Windows-specific features\n     */\n    setupWindowsFeatures() {\n        // Enable Windows Game Mode detection\n        if (navigator.userAgent.includes('Windows NT 10')) {\n            window.gameSupportsWindowsGameMode = true;\n        }\n        \n        // DirectX preference\n        document.documentElement.classList.add('windows-platform');\n    }\n    \n    /**\n     * Setup macOS-specific features\n     */\n    setupMacOSFeatures() {\n        // Metal performance shaders\n        if (this.currentOptimizations.performance.enableMetalPerformanceShaders) {\n            window.gameSupportsMetalPerformanceShaders = true;\n        }\n        \n        // macOS-specific styling\n        document.documentElement.classList.add('macos-platform');\n        \n        // Retina display optimization\n        if (window.devicePixelRatio > 1) {\n            document.documentElement.classList.add('retina-display');\n        }\n    }\n    \n    /**\n     * Setup Linux-specific features\n     */\n    setupLinuxFeatures() {\n        // Vulkan preference\n        if (this.currentOptimizations.rendering.preferVulkan) {\n            window.gameSupportsVulkan = true;\n        }\n        \n        // Linux-specific styling\n        document.documentElement.classList.add('linux-platform');\n    }\n    \n    /**\n     * Setup mobile-specific features\n     */\n    setupMobileFeatures() {\n        // Mobile-specific optimizations\n        document.documentElement.classList.add('mobile-platform');\n        \n        // Prevent zoom on double tap\n        document.addEventListener('touchend', (e) => {\n            if (e.touches.length === 0) {\n                e.preventDefault();\n            }\n        }, { passive: false });\n        \n        // Prevent pull-to-refresh\n        document.body.style.overscrollBehavior = 'none';\n    }\n    \n    /**\n     * Setup thermal monitoring\n     */\n    setupThermalMonitoring() {\n        // Monitor CPU usage and throttle if necessary\n        let lastTime = performance.now();\n        let frameCount = 0;\n        \n        const monitorThermal = () => {\n            const currentTime = performance.now();\n            frameCount++;\n            \n            if (currentTime - lastTime >= 1000) {\n                const fps = frameCount;\n                frameCount = 0;\n                lastTime = currentTime;\n                \n                // If FPS drops significantly, enable thermal throttling\n                if (fps < 20) {\n                    window.dispatchEvent(new CustomEvent('thermal-throttle', {\n                        detail: { level: 'high' }\n                    }));\n                } else if (fps < 40) {\n                    window.dispatchEvent(new CustomEvent('thermal-throttle', {\n                        detail: { level: 'medium' }\n                    }));\n                } else {\n                    window.dispatchEvent(new CustomEvent('thermal-throttle', {\n                        detail: { level: 'none' }\n                    }));\n                }\n            }\n            \n            requestAnimationFrame(monitorThermal);\n        };\n        \n        requestAnimationFrame(monitorThermal);\n    }\n    \n    /**\n     * Setup battery monitoring\n     */\n    setupBatteryMonitoring() {\n        if ('getBattery' in navigator) {\n            navigator.getBattery().then(battery => {\n                const handleBatteryChange = () => {\n                    const level = battery.level;\n                    const charging = battery.charging;\n                    \n                    if (level < 0.2 && !charging) {\n                        window.dispatchEvent(new CustomEvent('battery-low', {\n                            detail: { level, charging }\n                        }));\n                    } else if (level < 0.5 && !charging) {\n                        window.dispatchEvent(new CustomEvent('battery-medium', {\n                            detail: { level, charging }\n                        }));\n                    } else {\n                        window.dispatchEvent(new CustomEvent('battery-good', {\n                            detail: { level, charging }\n                        }));\n                    }\n                };\n                \n                battery.addEventListener('levelchange', handleBatteryChange);\n                battery.addEventListener('chargingchange', handleBatteryChange);\n                handleBatteryChange(); // Initial check\n            });\n        }\n    }\n    \n    /**\n     * Get current optimizations\n     */\n    getCurrentOptimizations() {\n        return { ...this.currentOptimizations };\n    }\n    \n    /**\n     * Update optimizations\n     */\n    updateOptimizations(newOptimizations) {\n        this.currentOptimizations = {\n            ...this.currentOptimizations,\n            ...newOptimizations\n        };\n        \n        this.applyPlatformOptimizations();\n    }\n    \n    /**\n     * Get recommended settings for current platform\n     */\n    getRecommendedSettings() {\n        const tier = this.platform.performance.tier;\n        const type = this.platform.type;\n        \n        return {\n            graphics: {\n                quality: tier === 'high' ? 'ultra' : tier === 'medium' ? 'high' : 'medium',\n                shadows: tier === 'high' ? 'high' : tier === 'medium' ? 'medium' : 'low',\n                particles: tier === 'high' ? 1.0 : tier === 'medium' ? 0.7 : 0.4,\n                antialiasing: tier === 'high' && type === 'desktop'\n            },\n            audio: {\n                quality: tier === 'high' ? 'high' : 'medium',\n                spatialAudio: tier === 'high' && type === 'desktop',\n                masterVolume: 0.8\n            },\n            controls: {\n                mouseSensitivity: type === 'desktop' ? 1.0 : 0.8,\n                touchSensitivity: type === 'mobile' ? 1.2 : 1.0,\n                hapticFeedback: type === 'mobile'\n            }\n        };\n    }\n}\n\nexport default PlatformOptimizer;"