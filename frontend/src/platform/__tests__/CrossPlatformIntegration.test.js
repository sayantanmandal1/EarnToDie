/**\n * Cross-Platform Integration Tests\n */\nimport CrossPlatformIntegration from '../CrossPlatformIntegration.js';\n\n// Mock game engine\nclass MockGameEngine {\n    constructor() {\n        this.inputConfig = null;\n        this.events = [];\n    }\n    \n    configureInput(config) {\n        this.inputConfig = config;\n    }\n    \n    onCrossPlatformReady(integration) {\n        this.events.push({ type: 'crossPlatformReady', integration });\n    }\n    \n    handleInput(type, data) {\n        this.events.push({ type: 'input', inputType: type, data });\n    }\n    \n    setFeature(feature, value) {\n        this.events.push({ type: 'setFeature', feature, value });\n    }\n}\n\n// Mock DOM and APIs\nconst setupMocks = () => {\n    global.document = {\n        createElement: jest.fn(() => ({\n            style: { cssText: '' },\n            classList: { add: jest.fn(), remove: jest.fn() },\n            appendChild: jest.fn(),\n            remove: jest.fn(),\n            addEventListener: jest.fn()\n        })),\n        body: {\n            appendChild: jest.fn(),\n            classList: { add: jest.fn(), remove: jest.fn() },\n            style: {}\n        },\n        head: { appendChild: jest.fn() },\n        documentElement: {\n            style: { setProperty: jest.fn() },\n            classList: { add: jest.fn(), remove: jest.fn() }\n        },\n        getElementById: jest.fn(),\n        addEventListener: jest.fn(),\n        hidden: false\n    };\n    \n    global.window = {\n        innerWidth: 1920,\n        innerHeight: 1080,\n        devicePixelRatio: 1,\n        addEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n        performance: { now: jest.fn(() => Date.now()) },\n        requestAnimationFrame: jest.fn(cb => setTimeout(cb, 16))\n    };\n    \n    global.navigator = {\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0.4472.124',\n        maxTouchPoints: 0,\n        deviceMemory: 8,\n        hardwareConcurrency: 8,\n        onLine: true,\n        serviceWorker: {\n            register: jest.fn(() => Promise.resolve({ addEventListener: jest.fn() }))\n        },\n        getGamepads: jest.fn(() => []),\n        getBattery: jest.fn(() => Promise.resolve({\n            level: 0.8,\n            charging: false,\n            addEventListener: jest.fn()\n        }))\n    };\n    \n    global.HTMLCanvasElement = {\n        prototype: {\n            getContext: jest.fn(() => ({}))\n        }\n    };\n};\n\ndescribe('CrossPlatformIntegration', () => {\n    let mockGameEngine;\n    let crossPlatformIntegration;\n    \n    beforeEach(() => {\n        setupMocks();\n        mockGameEngine = new MockGameEngine();\n        crossPlatformIntegration = new CrossPlatformIntegration(mockGameEngine);\n    });\n    \n    afterEach(() => {\n        if (crossPlatformIntegration) {\n            crossPlatformIntegration.destroy();\n        }\n    });\n    \n    describe('Initialization', () => {\n        test('should initialize successfully', () => {\n            expect(crossPlatformIntegration.initialized).toBe(true);\n            expect(crossPlatformIntegration.crossPlatformManager).toBeDefined();\n            expect(crossPlatformIntegration.responsiveUIManager).toBeDefined();\n            expect(crossPlatformIntegration.platformOptimizer).toBeDefined();\n        });\n        \n        test('should configure input based on platform', () => {\n            expect(mockGameEngine.inputConfig).toBeDefined();\n            expect(mockGameEngine.inputConfig.keyboard).toBe(true);\n            expect(mockGameEngine.inputConfig.mouse).toBe(true);\n        });\n    });\n    \n    describe('Platform Detection', () => {\n        test('should detect Windows platform', () => {\n            const platformInfo = crossPlatformIntegration.getPlatformInfo();\n            expect(platformInfo.os).toBe('windows');\n            expect(platformInfo.type).toBe('desktop');\n        });\n        \n        test('should detect performance tier', () => {\n            const platformInfo = crossPlatformIntegration.getPlatformInfo();\n            expect(platformInfo.performance.tier).toBe('high');\n        });\n    });\n    \n    describe('Configuration', () => {\n        test('should enable/disable adaptive controls', () => {\n            crossPlatformIntegration.setAdaptiveControlsEnabled(false);\n            expect(crossPlatformIntegration.adaptiveControlsEnabled).toBe(false);\n            \n            crossPlatformIntegration.setAdaptiveControlsEnabled(true);\n            expect(crossPlatformIntegration.adaptiveControlsEnabled).toBe(true);\n        });\n    });\n    \n    describe('Cleanup', () => {\n        test('should cleanup properly', () => {\n            crossPlatformIntegration.destroy();\n            expect(crossPlatformIntegration.initialized).toBe(false);\n        });\n    });\n});"